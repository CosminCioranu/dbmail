#! /bin/sh /usr/share/dpatch/dpatch-run
## 05_my_strdup.dpatch by  <paul@nfg.nl>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: No description.

@DPATCH@
diff -urNad dbmail-2.1/acl.c /tmp/dpep.9kRD7f/dbmail-2.1/acl.c
--- dbmail-2.1/acl.c	2004-12-08 10:42:52.000000000 +0100
+++ /tmp/dpep.9kRD7f/dbmail-2.1/acl.c	2004-12-08 10:42:57.000000000 +0100
@@ -306,11 +306,11 @@
 		/* user is not owner. User will never be granted any right
 		   by default, but may be granted any right by setting the
 		   right ACL */
-		return strdup("\"\" l r s w i p c d a");
+		return my_strdup("\"\" l r s w i p c d a");
 	}
 
 	/* user is owner, User will always be granted all rights */
-	return strdup(acl_right_chars);
+	return my_strdup(acl_right_chars);
 }
 
 char *acl_myrights(u64_t userid, u64_t mboxid)
diff -urNad dbmail-2.1/auth/authldap.c /tmp/dpep.9kRD7f/dbmail-2.1/auth/authldap.c
--- dbmail-2.1/auth/authldap.c	2004-12-04 13:29:14.000000000 +0100
+++ /tmp/dpep.9kRD7f/dbmail-2.1/auth/authldap.c	2004-12-08 10:48:43.000000000 +0100
@@ -655,7 +655,7 @@
 	      *user_idnr);
 
 	if (id_char)
-		free(id_char);
+		my_free(id_char);
 
 	if (*user_idnr == 0)
 		return 0;
@@ -718,7 +718,7 @@
 	      *client_idnr);
 
 	if (cid_char)
-		free(cid_char);
+		my_free(cid_char);
 
 	return 1;
 }
@@ -749,7 +749,7 @@
 	      *maxmail_size);
 
 	if (max_char)
-		free(max_char);
+		my_free(max_char);
 
 	return 1;
 }
@@ -1001,7 +1001,7 @@
 			} else {
 				list_nodeadd(fwds, address,
 					     strlen(address) + 1);
-				free(endptr);
+				my_free(endptr);
 			}
 
 			trace(TRACE_DEBUG,
@@ -1194,8 +1194,8 @@
 	/*int ret; unused variable */
 	int NUM_MODS = 9;
 	char *kaboom = "123";
-	char *cid = (char *)malloc(sizeof(char *));
-	char *maxm = (char *)malloc(sizeof(char *));
+	char *cid = (char *)my_malloc(sizeof(char *)*64);
+	char *maxm = (char *)my_malloc(sizeof(char *)*64);
 	sprintf(cid,"%llu",clientid);
 	sprintf(maxm,"%llu",maxmail);
 	
@@ -1910,7 +1910,7 @@
 	}
 
 	if (id_char)
-		free(id_char);
+		my_free(id_char);
 	if (ldap_dn)
 		ldap_memfree(ldap_dn);
 
@@ -1959,7 +1959,7 @@
  */
 char *auth_get_deliver_from_alias(const char *alias)
 {
-	char *deliver_to = (char *)malloc(sizeof(char *));
+	char *deliver_to = (char *)my_malloc(sizeof(char *));
 	deliver_to = NULL;
 
 
diff -urNad dbmail-2.1/auth/authsql.c /tmp/dpep.9kRD7f/dbmail-2.1/auth/authsql.c
--- dbmail-2.1/auth/authsql.c	2004-12-04 13:29:14.000000000 +0100
+++ /tmp/dpep.9kRD7f/dbmail-2.1/auth/authsql.c	2004-12-08 10:49:20.000000000 +0100
@@ -98,7 +98,7 @@
 		return 0;
 	}
 
-	if (!(escaped_username = (char *) malloc(strlen(username) * 2 + 1))) {
+	if (!(escaped_username = (char *) my_malloc(strlen(username) * 2 + 1))) {
 		trace(TRACE_ERROR, "%s,%s: out of memory allocating "
 		      "escaped username", __FILE__, __func__);
 		return -1;
@@ -109,7 +109,7 @@
 	snprintf(__auth_query_data, AUTH_QUERY_SIZE,
 		 "SELECT user_idnr FROM %susers WHERE userid='%s'",DBPFX,
 		 escaped_username);
-	free(escaped_username);
+	my_free(escaped_username);
 
 	if (__auth_query(__auth_query_data) == -1) {
 		trace(TRACE_ERROR, "%s,%s: could not execute query",
@@ -291,7 +291,7 @@
 		return -1;
 	}
 
-	if (!(escaped_username = (char *) malloc(strlen(username) * 2 + 1))) {
+	if (!(escaped_username = (char *) my_malloc(strlen(username) * 2 + 1))) {
 		trace(TRACE_ERROR, "%s,%s: out of memory allocating "
 			"escaped username", __FILE__, __func__);
 		return -1;
@@ -302,7 +302,7 @@
 	snprintf(__auth_query_data, AUTH_QUERY_SIZE,
 		 "SELECT deliver_to FROM %saliases WHERE "
 		 "lower(alias) = lower('%s')",DBPFX, escaped_username);
-	free(escaped_username);
+	my_free(escaped_username);
 
 	trace(TRACE_DEBUG, "%s,%s: checks [%d]", __FILE__, __func__,
 	      checks);
@@ -392,7 +392,7 @@
 	trace(TRACE_DEBUG, "%s,%s: checking user [%s] in alias table",
 	      __FILE__, __func__, username);
 
-	if (!(escaped_username = (char *) malloc(strlen(username) * 2 + 1))) {
+	if (!(escaped_username = (char *) my_malloc(strlen(username) * 2 + 1))) {
 		trace(TRACE_ERROR, "%s,%s: out of memory allocating "
 			"escaped username", __FILE__, __func__);
 		return -1;
@@ -403,7 +403,7 @@
 	snprintf(__auth_query_data, AUTH_QUERY_SIZE,
 		 "SELECT deliver_to FROM %saliases "
 		 "WHERE lower(alias) = lower('%s')",DBPFX, escaped_username);
-	free(escaped_username);
+	my_free(escaped_username);
 
 	trace(TRACE_DEBUG, "%s,%s: checks [%d]", __FILE__, __func__,
 	      checks);
@@ -485,7 +485,7 @@
 	*user_idnr = 0;
 
 #ifdef _DBAUTH_STRICT_USER_CHECK
-	if (!(escaped_username = (char *) malloc(strlen(username) * 2 + 1))) {
+	if (!(escaped_username = (char *) my_malloc(strlen(username) * 2 + 1))) {
 		trace(TRACE_ERROR, "%s,%s: out of memory allocating "
 			"escaped username", __FILE__, __func__);
 		return -1;
@@ -495,7 +495,7 @@
 	/* first check to see if this user already exists */
 	snprintf(__auth_query_data, AUTH_QUERY_SIZE,
 		 "SELECT * FROM %susers WHERE userid = '%s'",DBPFX, escaped_username);
-	free(escaped_username);
+	my_free(escaped_username);
 
 	if (__auth_query(__auth_query_data) == -1) {
 		/* query failed */
@@ -523,7 +523,7 @@
 
 	db_escape_string(escapedpass, password, strlen(password));
 
-	if (!(escaped_username = (char *) malloc(strlen(username) * 2 + 1))) {
+	if (!(escaped_username = (char *) my_malloc(strlen(username) * 2 + 1))) {
 		trace(TRACE_ERROR, "%s,%s: out of memory allocating "
 			"escaped username", __FILE__, __func__);
 		return -1;
@@ -538,7 +538,7 @@
 		 "('%s','%s',%llu,'%llu','%s', CURRENT_TIMESTAMP)",DBPFX,
 		 escaped_username, escapedpass, clientid, maxmail,
 		 enctype ? enctype : "");
-	free(escaped_username);
+	my_free(escaped_username);
 
 	if (__auth_query(__auth_query_data) == -1) {
 		/* query failed */
@@ -555,7 +555,7 @@
 {
 	char *escaped_username;
 
-	if (!(escaped_username = (char *) malloc(strlen(username) * 2 + 1))) {
+	if (!(escaped_username = (char *) my_malloc(strlen(username) * 2 + 1))) {
 		trace(TRACE_ERROR, "%s,%s: out of memory allocating "
 			"escaped username", __FILE__, __func__);
 		return -1;
@@ -566,7 +566,7 @@
 	snprintf(__auth_query_data, AUTH_QUERY_SIZE,
 		 "DELETE FROM %susers WHERE userid = '%s'",
 		 DBPFX, escaped_username);
-	free(escaped_username);
+	my_free(escaped_username);
 
 	if (__auth_query(__auth_query_data) == -1) {
 		/* query failed */
@@ -582,7 +582,7 @@
 {
 	char *escaped_new_name;
 
-	if (!(escaped_new_name = (char *) malloc(strlen(new_name) * 2 + 1))) {
+	if (!(escaped_new_name = (char *) my_malloc(strlen(new_name) * 2 + 1))) {
 		trace(TRACE_ERROR, "%s,%s: out of memory allocating "
 			"escaped new_name", __FILE__, __func__);
 		return -1;
@@ -593,7 +593,7 @@
 	snprintf(__auth_query_data, AUTH_QUERY_SIZE,
 		 "UPDATE %susers SET userid = '%s' WHERE user_idnr='%llu'",
 		 DBPFX, escaped_new_name, user_idnr);
-	free(escaped_new_name);
+	my_free(escaped_new_name);
 
 	if (__auth_query(__auth_query_data) == -1) {
 		trace(TRACE_ERROR,
@@ -692,7 +692,7 @@
 	if (strcmp(username, SHARED_MAILBOX_USERNAME) == 0)
 		return 0;
 
-	if (!(escuser = (char *) malloc(strlen(username) * 2 + 1))) {
+	if (!(escuser = (char *) my_malloc(strlen(username) * 2 + 1))) {
 		trace(TRACE_ERROR,
 		      "%s,%s: out of memory allocating for escaped userid",
 		      __FILE__, __func__);
@@ -813,7 +813,7 @@
 
 	create_current_timestring(&timestring);
 
-	if (!(escaped_username = (char *) malloc (strlen(username) * 2 + 1))) {
+	if (!(escaped_username = (char *) my_malloc (strlen(username) * 2 + 1))) {
 		trace(TRACE_ERROR, "%s,%s: error allocating escaped_username",
 		      __FILE__, __func__);
 		return -1;
@@ -824,7 +824,7 @@
 	snprintf(__auth_query_data, AUTH_QUERY_SIZE,
 		 "SELECT passwd,user_idnr FROM %susers WHERE "
 		 "userid = '%s'", DBPFX, escaped_username);
-	free(escaped_username);
+	my_free(escaped_username);
 
 	if (__auth_query(__auth_query_data) == -1) {
 		trace(TRACE_ERROR, "%s,%s: error calling __auth_query()",
@@ -987,7 +987,7 @@
 	const char *query_result = NULL;
 	char *escaped_alias;
 
-	if (!(escaped_alias = (char *) malloc(strlen(alias) * 2 + 1))) {
+	if (!(escaped_alias = (char *) my_malloc(strlen(alias) * 2 + 1))) {
 		trace(TRACE_ERROR, "%s,%s: out of memory allocating "
 		      "escaped alias", __FILE__, __func__);
 		return NULL;
@@ -998,7 +998,7 @@
 	snprintf(__auth_query_data, DEF_QUERYSIZE,
 		 "SELECT deliver_to FROM %saliases WHERE alias = '%s'",
 		 DBPFX, escaped_alias);
-	free(escaped_alias);
+	my_free(escaped_alias);
 
 	if (__auth_query(__auth_query_data) == -1) {
 		trace(TRACE_ERROR, "%s,%s: could not execute query",
@@ -1027,7 +1027,7 @@
 {
 	char *escaped_alias;
 
-	if (!(escaped_alias = (char *) malloc(strlen(alias) * 2 + 1))) {
+	if (!(escaped_alias = (char *) my_malloc(strlen(alias) * 2 + 1))) {
 		trace(TRACE_ERROR, "%s,%s: out of memory allocating "
 		      "escaped alias", __FILE__, __func__);
 		return -1;
@@ -1046,7 +1046,7 @@
 		trace(TRACE_ERROR,
 		      "%s,%s: query for searching alias failed", __FILE__,
 		      __func__);
-		free(escaped_alias);
+		my_free(escaped_alias);
 		return -1;
 	}
 
@@ -1055,7 +1055,7 @@
 		      "%s,%s: alias [%s] for user [%llu] already exists",
 		      __FILE__, __func__, escaped_alias, user_idnr);
 
-		free(escaped_alias);
+		my_free(escaped_alias);
 		db_free_result();
 		return 1;
 	}
@@ -1065,7 +1065,7 @@
 		 "INSERT INTO %saliases (alias,deliver_to,client_idnr) "
 		 "VALUES ('%s','%llu','%llu')",DBPFX, escaped_alias, user_idnr,
 		 clientid);
-	free(escaped_alias);
+	my_free(escaped_alias);
 
 	if (db_query(__auth_query_data) == -1) {
 		/* query failed */
@@ -1082,13 +1082,13 @@
 	char *escaped_alias;
 	char *escaped_deliver_to;
 
-	if (!(escaped_alias = (char *) malloc(strlen(alias) * 2 + 1))) {
+	if (!(escaped_alias = (char *) my_malloc(strlen(alias) * 2 + 1))) {
 		trace(TRACE_ERROR, "%s,%s: out of memory allocating "
 		      "escaped alias", __FILE__, __func__);
 		return -1;
 	}
 
-	if (!(escaped_deliver_to = (char *) malloc(strlen(deliver_to) * 2 + 1))) {
+	if (!(escaped_deliver_to = (char *) my_malloc(strlen(deliver_to) * 2 + 1))) {
 		trace(TRACE_ERROR, "%s,%s: out of memory allocating "
 		      "escaped deliver_to", __FILE__, __func__);
 		return -1;
@@ -1119,8 +1119,8 @@
 		trace(TRACE_ERROR,
 		      "%s,%s: query for searching alias failed", __FILE__,
 		      __func__);
-		free(escaped_alias);
-		free(escaped_deliver_to);
+		my_free(escaped_alias);
+		my_free(escaped_deliver_to);
 		return -1;
 	}
 
@@ -1129,8 +1129,8 @@
 		      "%s,%s: alias [%s] --> [%s] already exists",
 		      __FILE__, __func__, alias, deliver_to);
 
-		free(escaped_alias);
-		free(escaped_deliver_to);
+		my_free(escaped_alias);
+		my_free(escaped_deliver_to);
 		db_free_result();
 		return 1;
 	}
@@ -1139,8 +1139,8 @@
 	snprintf(__auth_query_data, DEF_QUERYSIZE,
 		 "INSERT INTO %saliases (alias,deliver_to,client_idnr) "
 		 "VALUES ('%s','%s','%llu')",DBPFX, escaped_alias, escaped_deliver_to, clientid);
-	free(escaped_alias);
-	free(escaped_deliver_to);
+	my_free(escaped_alias);
+	my_free(escaped_deliver_to);
 
 	if (__auth_query(__auth_query_data) == -1) {
 		/* query failed */
@@ -1155,7 +1155,7 @@
 {
 	char *escaped_alias;
 
-	if (!(escaped_alias = (char *) malloc(strlen(alias) * 2 + 1))) {
+	if (!(escaped_alias = (char *) my_malloc(strlen(alias) * 2 + 1))) {
 		trace(TRACE_ERROR, "%s,%s: out of memory allocating "
 		      "escaped alias", __FILE__, __func__);
 		return -1;
@@ -1166,7 +1166,7 @@
 	snprintf(__auth_query_data, DEF_QUERYSIZE,
 		 "DELETE FROM %saliases WHERE deliver_to='%llu' "
 		 "AND lower(alias) = lower('%s')",DBPFX, user_idnr, escaped_alias);
-	free(escaped_alias);
+	my_free(escaped_alias);
 
 	if (__auth_query(__auth_query_data) == -1) {
 		/* query failed */
@@ -1182,13 +1182,13 @@
 	char *escaped_alias;
 	char *escaped_deliver_to;
 
-	if (!(escaped_alias = (char *) malloc(strlen(alias) * 2 + 1))) {
+	if (!(escaped_alias = (char *) my_malloc(strlen(alias) * 2 + 1))) {
 		trace(TRACE_ERROR, "%s,%s: out of memory allocating "
 		      "escaped alias", __FILE__, __func__);
 		return -1;
 	}
 
-	if (!(escaped_deliver_to = (char *) malloc(strlen(deliver_to) * 2 + 1))) {
+	if (!(escaped_deliver_to = (char *) my_malloc(strlen(deliver_to) * 2 + 1))) {
 		trace(TRACE_ERROR, "%s,%s: out of memory allocating "
 		      "escaped deliver_to", __FILE__, __func__);
 		return -1;
@@ -1200,8 +1200,8 @@
 	snprintf(__auth_query_data, DEF_QUERYSIZE,
 		 "DELETE FROM %saliases WHERE lower(deliver_to) = lower('%s') "
 		 "AND lower(alias) = lower('%s')",DBPFX, deliver_to, alias);
-	free(escaped_alias);
-	free(escaped_deliver_to);
+	my_free(escaped_alias);
+	my_free(escaped_deliver_to);
 
 	if (db_query(__auth_query_data) == -1) {
 		/* query failed */
diff -urNad dbmail-2.1/db.c /tmp/dpep.9kRD7f/dbmail-2.1/db.c
--- dbmail-2.1/db.c	2004-12-08 10:42:52.000000000 +0100
+++ /tmp/dpep.9kRD7f/dbmail-2.1/db.c	2004-12-08 10:42:57.000000000 +0100
@@ -467,7 +467,7 @@
 		return -1;
 	}
 
-	*script = strdup(query_result);
+	*script = my_strdup(query_result);
 	db_free_result();
 
 	return 0;
@@ -514,7 +514,7 @@
 
 	while(i < n) {
 		info = (struct ssinfo *)my_malloc(sizeof(struct ssinfo));
-		info->name = strdup(db_get_result(i, 0));   
+		info->name = my_strdup(db_get_result(i, 0));   
 		info->active = (int)db_get_result(i, 1);
 		list_nodeadd(scriptlist,info,sizeof(struct ssinfo));	
 		i++;
@@ -653,7 +653,7 @@
 	if (db_num_rows() > 0) {
 		query_result = db_get_result(0, 0);
 		if (query_result && strlen(query_result) > 0) {
-			*notify_address = strdup(query_result);
+			*notify_address = my_strdup(query_result);
 			trace(TRACE_DEBUG, "%s,%s: found address [%s]",
 			      __FILE__, __func__, *notify_address);
 		}
@@ -680,7 +680,7 @@
 	if (db_num_rows() > 0) {
 		query_result = db_get_result(0, 0);
 		if (query_result && strlen(query_result) > 0) {
-			*reply_body = strdup(query_result);
+			*reply_body = my_strdup(query_result);
 			trace(TRACE_DEBUG, "%s,%s: found reply_body [%s]",
 			      __FILE__, __func__, *reply_body);
 		}
@@ -803,7 +803,7 @@
 	assert(unique_id);
 
 	if (!mailbox)
-		mailbox = strdup("INBOX");
+		mailbox = my_strdup("INBOX");
 
 	switch (create_or_error_mailbox) {
 	case CREATE_IF_MBOX_NOT_FOUND:
@@ -2240,7 +2240,7 @@
 	trace(TRACE_DEBUG, "%s,%s: looking for mailbox with FQN [%s].",
 	      __FILE__, __func__, fq_name);
 
-	name_str_copy = strdup(fq_name);
+	name_str_copy = my_strdup(fq_name);
 	/* see if this is a #User mailbox */
 	if ((strlen(NAMESPACE_USER) > 0) &&
 	    (strstr(fq_name, NAMESPACE_USER) == fq_name)) {
@@ -2297,9 +2297,9 @@
 	assert(mailbox_idnr != NULL);
 	*mailbox_idnr = 0;
 
-	local_name = strdup(name);
+	local_name = my_strdup(name);
 	if (local_name == NULL) {
-		trace(TRACE_ERROR, "%s,%s: error strdup(name). Out of memory?",
+		trace(TRACE_ERROR, "%s,%s: error my_strdup(name). Out of memory?",
 		      __FILE__, __func__);
 		return -1;
 	}
@@ -2310,7 +2310,7 @@
 		 "SELECT mailbox_idnr FROM %smailboxes "
 		 "WHERE name='%s' AND owner_idnr='%llu'",DBPFX, local_name,
 		 owner_idnr);
-	free(local_name); /* allocated with strdup(), so uses normal free() */
+	my_free(local_name);
 	if (db_query(query) == -1) {
 		trace(TRACE_ERROR,
 		      "%s,%s: could not select mailbox '%s'\n", __FILE__,
@@ -2417,7 +2417,7 @@
 	}
 	
 	for (i = 0; i < n_rows; i++) {
-		all_mailbox_names[i] = strdup(db_get_result(i, 0));
+		all_mailbox_names[i] = my_strdup(db_get_result(i, 0));
 		all_mailboxes[i] = db_get_result_u64(i, 1);
 		all_mailbox_owners[i] = db_get_result_u64(i, 2);
 	} 
@@ -2440,8 +2440,6 @@
 					mailbox_idnr;
 				(*nr_mailboxes)++;
 			}
-			my_free(mailbox_name);
-			my_free(all_mailbox_names[i]);
 		}
 	}
 	my_free(all_mailbox_names);
@@ -2714,7 +2712,7 @@
 	}
 
 	if ((tmp = db_get_result(0, 0))) 
-		mailbox_name = strdup(tmp);
+		mailbox_name = my_strdup(tmp);
 
 	db_free_result();
 	if (mailbox_name) {
@@ -2722,7 +2720,7 @@
 			 "SELECT mailbox_idnr FROM %smailboxes WHERE name LIKE '%s/%s'"
 			 " AND owner_idnr = '%llu'",DBPFX,
 			 mailbox_name, filter, user_idnr);
-		free(mailbox_name); /* alloc'd with strdup so uses free() */
+		my_free(mailbox_name);
 	}
 	else
 		snprintf(query, DEF_QUERYSIZE,
@@ -3084,11 +3082,10 @@
 		*name = '\0';
 		return 0;
 	}
-	tmp_name = strdup(query_result);
+	tmp_name = my_strdup(query_result);
 	
 	db_free_result();
-	tmp_fq_name =
-	    mailbox_add_namespace(tmp_name, owner_idnr, user_idnr);
+	tmp_fq_name = mailbox_add_namespace(tmp_name, owner_idnr, user_idnr);
 	if (!tmp_fq_name) {
 		trace(TRACE_ERROR, "%s,%s: error getting fully qualified "
 		      "mailbox name", __FILE__, __func__);
diff -urNad dbmail-2.1/dbsearch.c /tmp/dpep.9kRD7f/dbmail-2.1/dbsearch.c
--- dbmail-2.1/dbsearch.c	2004-12-08 10:42:52.000000000 +0100
+++ /tmp/dpep.9kRD7f/dbmail-2.1/dbsearch.c	2004-12-08 10:42:57.000000000 +0100
@@ -100,7 +100,7 @@
  */
 static int num_from_imapdate(const char *date);
 
-int db_search(int *rset, int setlen, const char *key, mailbox_t * mb,
+int db_search(unsigned int *rset, int setlen, const char *key, mailbox_t * mb,
 	      int type)
 {
 	u64_t uid;
@@ -171,7 +171,7 @@
    list_btree_insert(root, curr);
 }
 
-int db_sort_parsed(int *rset, unsigned int setlen,
+int db_sort_parsed(unsigned int *rset, unsigned int setlen,
                      search_key_t *sk, mailbox_t *mb)
 {
 
@@ -215,7 +215,7 @@
     return 0;
 }
 
-int db_search_parsed(int *rset, unsigned int setlen,
+int db_search_parsed(unsigned int *rset, unsigned int setlen,
 		     search_key_t * sk, mailbox_t * mb)
 {
 	unsigned i;
diff -urNad dbmail-2.1/dbsearch.h /tmp/dpep.9kRD7f/dbmail-2.1/dbsearch.h
--- dbmail-2.1/dbsearch.h	2004-12-08 10:42:52.000000000 +0100
+++ /tmp/dpep.9kRD7f/dbmail-2.1/dbsearch.h	2004-12-08 10:42:57.000000000 +0100
@@ -52,7 +52,7 @@
  *     - 1 on synchronisation error. (search returned a UID which was not
  *     in the MSN-list -> mailbox should be updated
  */
-int db_search(int *rset, int setlen, const char *key, mailbox_t * mb,
+int db_search(unsigned int *rset, int setlen, const char *key, mailbox_t * mb,
 	      int type);
 
 /**
@@ -66,11 +66,11 @@
  *    - 0 on success
  *    - 1 if mb->exists != setlen
  */
-int db_search_parsed(int *rset, unsigned setlen,
+int db_search_parsed(unsigned int *rset, unsigned setlen,
 		     search_key_t * sk, mailbox_t * mb);
 
 
-int db_sort_parsed(int *rset, unsigned setlen, 
+int db_sort_parsed(unsigned int *rset, unsigned setlen, 
 		     search_key_t *sk, mailbox_t *mb);
  
 #endif
diff -urNad dbmail-2.1/debug.c /tmp/dpep.9kRD7f/dbmail-2.1/debug.c
--- dbmail-2.1/debug.c	2004-12-08 10:42:52.000000000 +0100
+++ /tmp/dpep.9kRD7f/dbmail-2.1/debug.c	2004-12-08 10:42:57.000000000 +0100
@@ -199,3 +199,20 @@
 
 #endif
 }
+
+
+char * my_strdup(const char *str)
+{
+	char *new_str;
+	size_t length;
+	
+	if (str) {
+		length = strlen(str) + 1;
+		new_str = (char *)my_malloc(length);
+		memcpy(new_str,str,length);
+	} else {
+		new_str = NULL;
+	}
+
+	return new_str;
+}
diff -urNad dbmail-2.1/debug.h /tmp/dpep.9kRD7f/dbmail-2.1/debug.h
--- dbmail-2.1/debug.h	2004-12-08 10:42:57.000000000 +0100
+++ /tmp/dpep.9kRD7f/dbmail-2.1/debug.h	2004-12-08 10:42:57.000000000 +0100
@@ -92,4 +92,5 @@
 
 void __debug_dumpallocs(void);
 
+char * my_strdup(const char *str);
 #endif
diff -urNad dbmail-2.1/imaputil.c /tmp/dpep.9kRD7f/dbmail-2.1/imaputil.c
--- dbmail-2.1/imaputil.c	2004-12-08 10:42:52.000000000 +0100
+++ /tmp/dpep.9kRD7f/dbmail-2.1/imaputil.c	2004-12-08 10:42:57.000000000 +0100
@@ -2376,12 +2376,13 @@
  * returns 0 on succes, -1 on dbase error, -2 on memory error, 1 if result set is too small
  * (new mail has been added to mailbox while searching, mailbox data out of sync)
  */
-int perform_imap_search(int *rset, int setlen, search_key_t * sk,
+int perform_imap_search(unsigned int *rset, int setlen, search_key_t * sk,
 			mailbox_t * mb, int sorted)
 {
 	search_key_t *subsk;
 	struct element *el;
-	int result, *newset = NULL, i;
+	int result, i;
+	unsigned int *newset = NULL;
 	int subtype = IST_SUBSEARCH_OR;
 
 	if (!rset)
@@ -2522,7 +2523,7 @@
 }
 
 
-void invert_set(int *set, int setlen)
+void invert_set(unsigned int *set, int setlen)
 {
 	int i;
 
@@ -2534,7 +2535,7 @@
 }
 
 
-void combine_sets(int *dest, int *sec, int setlen, int type)
+void combine_sets(unsigned int *dest, unsigned int *sec, int setlen, int type)
 {
 	int i;
 
@@ -2557,7 +2558,7 @@
  * builds a msn-set from a IMAP message set spec. the IMAP set is supposed to be correct,
  * no checks are performed.
  */
-void build_set(int *set, unsigned int setlen, char *cset)
+void build_set(unsigned int *set, unsigned int setlen, char *cset)
 {
 	unsigned int i;
 	u64_t num, num2;
@@ -2627,7 +2628,7 @@
  *
  * as build_set() but takes uid's instead of MSN's
  */
-void build_uid_set(int *set, unsigned int setlen, char *cset,
+void build_uid_set(unsigned int *set, unsigned int setlen, char *cset,
 		   mailbox_t * mb)
 {
 	unsigned int i, msn, msn2;
diff -urNad dbmail-2.1/imaputil.h /tmp/dpep.9kRD7f/dbmail-2.1/imaputil.h
--- dbmail-2.1/imaputil.h	2004-12-08 10:42:52.000000000 +0100
+++ /tmp/dpep.9kRD7f/dbmail-2.1/imaputil.h	2004-12-08 10:42:57.000000000 +0100
@@ -81,15 +81,15 @@
 void send_data(FILE * to, MEM * from, int cnt);
 
 int build_imap_search(char **search_keys, struct list *sl, int *idx, int sorted);
-int perform_imap_search(int *rset, int setlen, search_key_t * sk,
+int perform_imap_search(unsigned int *rset, int setlen, search_key_t * sk,
 			mailbox_t * mb, int sorted);
 void free_searchlist(struct list *sl);
 
-void invert_set(int *set, int setlen);
-void combine_sets(int *dest, int *sec, int setlen, int type);
+void invert_set(unsigned int *set, int setlen);
+void combine_sets(unsigned int *dest, unsigned int *sec, int setlen, int type);
 
-void build_set(int *set, unsigned int setlen, char *cset);
-void build_uid_set(int *set, unsigned int setlen, char *cset,
+void build_set(unsigned int *set, unsigned int setlen, char *cset);
+void build_uid_set(unsigned int *set, unsigned int setlen, char *cset,
 		   mailbox_t * mb);
 void dumpsearch(search_key_t * sk, int level);
 
diff -urNad dbmail-2.1/list.c /tmp/dpep.9kRD7f/dbmail-2.1/list.c
--- dbmail-2.1/list.c	2004-12-08 10:42:52.000000000 +0100
+++ /tmp/dpep.9kRD7f/dbmail-2.1/list.c	2004-12-08 10:42:57.000000000 +0100
@@ -245,7 +245,7 @@
 		list_btree_printout(tree->right, i);
 }
 
-void list_btree_traverse(sortitems_t * tree, int * i, int *rset) {
+void list_btree_traverse(sortitems_t * tree, int * i, unsigned int *rset) {
 	if(tree->left) 
 		list_btree_traverse(tree->left, i, rset);
 	trace(TRACE_DEBUG, "list_btree_traverse: i '%d' '%d', '%s'\n", 
diff -urNad dbmail-2.1/list.h /tmp/dpep.9kRD7f/dbmail-2.1/list.h
--- dbmail-2.1/list.h	2004-12-08 10:42:52.000000000 +0100
+++ /tmp/dpep.9kRD7f/dbmail-2.1/list.h	2004-12-08 10:42:57.000000000 +0100
@@ -73,7 +73,7 @@
 
 void list_btree_insert(sortitems_t ** tree, sortitems_t * item);
 void list_btree_printout(sortitems_t * tree, int *i);
-void list_btree_traverse(sortitems_t * tree, int * i, int *rset);
+void list_btree_traverse(sortitems_t * tree, int * i, unsigned int *rset);
 void list_btree_free(sortitems_t * tree);
 
 #endif
diff -urNad dbmail-2.1/main.c /tmp/dpep.9kRD7f/dbmail-2.1/main.c
--- dbmail-2.1/main.c	2004-12-08 10:42:52.000000000 +0100
+++ /tmp/dpep.9kRD7f/dbmail-2.1/main.c	2004-12-08 10:42:57.000000000 +0100
@@ -206,7 +206,7 @@
 			      "main(): using SPECIAL_DELIVERY to usernames");
 
 			dsnuser_init(&dsnuser);
-			dsnuser.address = strdup(optarg);
+			dsnuser.address = my_strdup(optarg);
 
 			/* Add argument onto the users list. */
 			if (list_nodeadd
@@ -226,7 +226,7 @@
 			      "main(): using SPECIAL_DELIVERY to email addresses");
 
 			dsnuser_init(&dsnuser);
-			dsnuser.address = strdup(optarg);
+			dsnuser.address = my_strdup(optarg);
 
 			/* Add argument onto the users list. */
 			if (list_nodeadd
@@ -378,7 +378,7 @@
 			deliver_to_user_t dsnuser;
 
 			dsnuser_init(&dsnuser);
-			dsnuser.address = strdup((char *) tmp->data);
+			dsnuser.address = my_strdup((char *) tmp->data);
 
 			list_nodeadd(&dsnusers, &dsnuser,
 				     sizeof(deliver_to_user_t));
@@ -392,7 +392,7 @@
 		/* Loop through the dsnusers list, setting the destination mailbox. */
 		for (tmp = list_getstart(&dsnusers); tmp != NULL;
 		     tmp = tmp->nextnode) {
-			((deliver_to_user_t *)tmp->data)->mailbox = strdup(deliver_to_mailbox);
+			((deliver_to_user_t *)tmp->data)->mailbox = my_strdup(deliver_to_mailbox);
 		}
 	}
 
diff -urNad dbmail-2.1/mime.c /tmp/dpep.9kRD7f/dbmail-2.1/mime.c
--- dbmail-2.1/mime.c	2004-12-08 10:42:57.000000000 +0100
+++ /tmp/dpep.9kRD7f/dbmail-2.1/mime.c	2004-12-08 10:42:57.000000000 +0100
@@ -74,7 +74,7 @@
 
 	trace(TRACE_DEBUG, "mime_readheader(): entering mime loop");
 
-	blkdata = strdup(datablock);
+	blkdata = my_strdup(datablock);
 
 	list_init(mimelist);
 	*headersize = 0;
@@ -83,7 +83,7 @@
 		trace(TRACE_DEBUG,
 		      "mime_readheader(): found an empty header\n");
 		(*blkidx)++;	/* skip \n */
-		free(blkdata);
+		my_free(blkdata);
 		return 1;	/* found 1 newline */
 	}
 
@@ -92,7 +92,7 @@
 
 	if (!mr) {
 		trace(TRACE_ERROR, "mime_readheader(): out of memory\n");
-		free(blkdata);
+		my_free(blkdata);
 		return -2;
 	}
 
@@ -123,7 +123,7 @@
 			/* end of data block reached (??) */
 			my_free(mr);
 			*blkidx += (endptr - startptr);
-			free(blkdata);
+			my_free(blkdata);
 			return totallines;
 		}
 
@@ -196,7 +196,7 @@
 				trace(TRACE_ERROR,
 				      "mime_readheader(): cannot add element to list\n");
 				my_free(mr);
-				free(blkdata);
+				my_free(blkdata);
 				return -2;
 			}
 
@@ -244,7 +244,7 @@
 					trace(TRACE_ERROR,
 					      "mime_readheader(): cannot add element to list\n");
 					my_free(mr);
-					free(blkdata);
+					my_free(blkdata);
 					return -2;
 				}
 			} else {
@@ -289,7 +289,7 @@
 			      "mime_readheader(): found double newline; header size: %d lines\n",
 			      totallines);
 			my_free(mr);
-			free(blkdata);
+			my_free(blkdata);
 			return totallines;
 		}
 
@@ -303,11 +303,11 @@
 	if (valid_mime_lines < 2) {
 		trace(TRACE_ERROR,
 		      "mime_readheader(): no valid mime headers found\n");
-		free(blkdata);
+		my_free(blkdata);
 		return -1;
 	}
 
-	free(blkdata);
+	my_free(blkdata);
 	/* success ? */
 	trace(TRACE_DEBUG, " *** mime_readheader() done ***\n");
 	return totallines;
diff -urNad dbmail-2.1/misc.c /tmp/dpep.9kRD7f/dbmail-2.1/misc.c
--- dbmail-2.1/misc.c	2004-12-08 10:42:57.000000000 +0100
+++ /tmp/dpep.9kRD7f/dbmail-2.1/misc.c	2004-12-08 10:42:57.000000000 +0100
@@ -130,7 +130,7 @@
 
 	if (user_idnr == owner_idnr) {
 		/* mailbox owned by current user */
-		return strdup(mailbox_name);
+		return my_strdup(mailbox_name);
 	} else {
 		owner_name = auth_get_userid(owner_idnr);
 		if (owner_name == NULL) {
@@ -357,7 +357,7 @@
 	/* If there are more strings, copy those, too */
 	for (i = j = n = 0; i <= len_decoded; i++) {
 		if (str_decoded[i] == '\0') {
-			ret[n] = strdup(str_decoded + j);
+			ret[n] = my_strdup(str_decoded + j);
 			j = i + 1;
 			n++;
 		}
diff -urNad dbmail-2.1/quota.c /tmp/dpep.9kRD7f/dbmail-2.1/quota.c
--- dbmail-2.1/quota.c	2004-12-08 10:42:52.000000000 +0100
+++ /tmp/dpep.9kRD7f/dbmail-2.1/quota.c	2004-12-08 10:42:57.000000000 +0100
@@ -71,7 +71,7 @@
 int quota_set_root(quota_t * quota, char *root)
 {
 	my_free(quota->root);
-	quota->root = strdup(root);
+	quota->root = my_strdup(root);
 	return (quota->root == NULL);
 }
 
diff -urNad dbmail-2.1/sievecmd.c /tmp/dpep.9kRD7f/dbmail-2.1/sievecmd.c
--- dbmail-2.1/sievecmd.c	2004-12-08 10:42:57.000000000 +0100
+++ /tmp/dpep.9kRD7f/dbmail-2.1/sievecmd.c	2004-12-08 10:42:57.000000000 +0100
@@ -93,7 +93,7 @@
 			source = stdin;	// FIXME to take files as input, too
 			break;
 		case 'u':
-			user_name = strdup(optarg);
+			user_name = my_strdup(optarg);
 			break;
 		case 'l':
 			if (act != 0)
@@ -164,7 +164,7 @@
 	}
 
       mainend:
-	free(user_name);
+	my_free(user_name);
 	db_disconnect();
 	auth_disconnect();
 	return res;
diff -urNad dbmail-2.1/smtp-convert.c /tmp/dpep.9kRD7f/dbmail-2.1/smtp-convert.c
--- dbmail-2.1/smtp-convert.c	2004-12-08 10:42:52.000000000 +0100
+++ /tmp/dpep.9kRD7f/dbmail-2.1/smtp-convert.c	2004-12-08 10:42:57.000000000 +0100
@@ -149,9 +149,9 @@
 					namelist[n]->d_name);
 				traverse(newpath);
 			}
-			free(namelist[n]);
+			my_free(namelist[n]);
 		}
-		free(namelist);
+		my_free(namelist);
 	}
 	return 0;
 }
diff -urNad dbmail-2.1/sort/sortsieve.c /tmp/dpep.9kRD7f/dbmail-2.1/sort/sortsieve.c
--- dbmail-2.1/sort/sortsieve.c	2004-12-08 10:42:52.000000000 +0100
+++ /tmp/dpep.9kRD7f/dbmail-2.1/sort/sortsieve.c	2004-12-08 10:46:36.000000000 +0100
@@ -218,7 +218,7 @@
 	int tmpmeth = 0;
 
 	while (res == SIEVE2_OK) {
-		if ((tmpsa = malloc(sizeof(sort_action_t))) == NULL)
+		if ((tmpsa = my_malloc(sizeof(sort_action_t))) == NULL)
 			break;
 		res = sieve2_action_next(&a, &code, &action_context);
 		if (res == SIEVE2_DONE) {
@@ -240,7 +240,7 @@
 				trace(TRACE_DEBUG, "Destination is %s\n",
 				       context->addr);
 				tmpmeth = SA_REDIRECT;
-				tmpdest = strdup(context->addr);
+				tmpdest = my_strdup(context->addr);
 				break;
 			}
 		case SIEVE2_ACTION_REJECT:
@@ -251,7 +251,7 @@
 				trace(TRACE_DEBUG, "Action is REJECT: ");
 				trace(TRACE_DEBUG, "Message is %s\n", context->msg);
 				tmpmeth = SA_REJECT;
-				tmpmsg = strdup(context->msg);
+				tmpmsg = my_strdup(context->msg);
 				break;
 			}
 		case SIEVE2_ACTION_DISCARD:
@@ -267,7 +267,7 @@
 				trace(TRACE_DEBUG, "Destination is %s\n",
 				       context->mailbox);
 				tmpmeth = SA_FILEINTO;
-				tmpdest = strdup(context->mailbox);
+				tmpdest = my_strdup(context->mailbox);
 				break;
 			}
 		case SIEVE2_ACTION_NOTIFY:
diff -urNad dbmail-2.1/timsieve.c /tmp/dpep.9kRD7f/dbmail-2.1/timsieve.c
--- dbmail-2.1/timsieve.c	2004-12-08 10:42:52.000000000 +0100
+++ /tmp/dpep.9kRD7f/dbmail-2.1/timsieve.c	2004-12-08 10:42:57.000000000 +0100
@@ -411,13 +411,13 @@
 								session->
 								    username
 								    =
-								    strdup
+								    my_strdup
 								    (tmp64
 								     [1]);
 								session->
 								    password
 								    =
-								    strdup
+								    my_strdup
 								    (tmp64
 								     [2]);
 							} else {
diff -urNad dbmail-2.1/user.c /tmp/dpep.9kRD7f/dbmail-2.1/user.c
--- dbmail-2.1/user.c	2004-12-08 10:42:52.000000000 +0100
+++ /tmp/dpep.9kRD7f/dbmail-2.1/user.c	2004-12-08 10:42:57.000000000 +0100
@@ -457,7 +457,7 @@
 			if (pw[len-1] == '\n')
 			        pw[len-1] = '\0';
 			/* fgets guarantees a nul terminated string. */
-			passwd = strdup(pw);
+			passwd = my_strdup(pw);
 
 			/* Restore the previous terminal state (with echo back on). */
 			tcsetattr(fileno(stdin), TCSANOW, &oldattr);
@@ -743,7 +743,7 @@
 	}
 
 	/* Pass this out of the function. */
-	*password = strdup(pw);
+	*password = my_strdup(pw);
 
 	return result;
 }
